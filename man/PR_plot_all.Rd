% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PR_plot_all.R
\name{PR_plot_all}
\alias{PR_plot_all}
\title{PR_plot_all}
\usage{
PR_plot_all(data1, data2, feature_n)
}
\arguments{
\item{data1}{Precision-Recall after cross-validation. An output data frame of \code{\link{ML_final}} (list\bold{[[4]]}, cv_PR_result).}

\item{data2}{mean receiver operating characteristic of cross-validation. An output data frame of \code{\link{ML_final}} (list\bold{[[5]]}, cv_meanROC_result).}

\item{feature_n}{A numeric value specifying the number of feature to be shown.}
}
\value{
Return a list of 1 tibble, 1 data frame, and 2 plots.
\enumerate{
\item data2[-c(6,7)]: tibble of precision and recall values of each sample
\item mean_AUC_plot: PR curve plot
\item PR_plot_data: data frame of the AUC, recall, and precision of PR of n features.
\item PR_plot: average PR curve plot of n feature.
}
}
\description{
The Precision-Recall (PR) curve is one of the common methods to evaluate the diagnostic ability of a binary classifier. Mean AUC and 95% confidence interval for the PR curve are calculated from all CV runs in each feature number. PR curve is more sensitive to data with highly skewed datasets and offers a more informative view of an algorithm's performance.

This function provides
\enumerate{
\item the overall PR Curve of CVs with different feature numbers.
\item the PR Curve of average CVs by user-selected feature numbers.
}
}
\examples{
\dontrun{
data("ML_exp_data")
data("ML_lipid_char_table")
data("ML_condition_table")
exp_data <- ML_exp_data
lipid_char_table <- ML_lipid_char_table
condition_table <- ML_condition_table
char_var <- colnames(lipid_char_table)[-1]
ML_data <- ML_data_process(exp_data, group_info = condition_table, lipid_char_table,
                           char_var[1], exclude_var_missing=T, missing_pct_limit=50,
                           replace_zero=T, zero2what='min', xmin=0.5, replace_NA=T,
                           NA2what='min', ymin=0.5, pct_transform=T, data_transform=T,
                           trans_type='log', centering=F, scaling=F)
ML_output <- ML_final(ML_data[[2]], ranking_method='Random_forest', ML_method='Random_forest',
                      split_prop=0.3, nfold=10)
PR_plot_all(ML_output[[4]], ML_output[[5]], feature_n=10)
}
}
