% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ML_final.R
\name{ML_final}
\alias{ML_final}
\title{ML_final}
\usage{
ML_final(ML_data, ranking_method, ML_method, split_prop, nfold, alpha = NULL)
}
\arguments{
\item{ML_data}{The output data frame(list[[2]]) of \code{\link{ML_data_process}}.}

\item{ranking_method}{A character string for the ranking method to be computed. Allowed methods include 'p_value', 'pvalue_FC', 'ROC', 'Random_forest', 'SVM', 'Lasso', 'Ridge', 'ElasticNet'.}

\item{ML_method}{A character string for the machine learning method to be computed. Allowed methods include 'Random_forest', 'SVM', 'Lasso', 'Ridge', 'ElasticNet', 'xgboost'.}

\item{split_prop}{A numeric value between 0.1 to 0.5 indicates the proportion of data to be retained for modeling/analysis.}

\item{nfold}{A numeric value. The original dataset is randomly partitioned into N fold equal size subsamples.}

\item{alpha}{(optional) A numeric value between 0 and 1. Only need when selecting 'ElasticNet' as ML_method. 0 for Ridge and 1 for Lasso.}
}
\value{
Return a list of 6 data frames and 3 lists.
\enumerate{
\item cv_model_result: data frame, an machine learning model after cross-validation.
\item cv_cm_result: data frame, confusion matrix after cross-validation.
\item cv_ROC_result: data frame, receiver operating characteristic after cross-validation.
\item cv_PR_result: data frame, Precision-Recall after cross-validation.
\item cv_meanROC_result: data frame, mean receiver operating characteristic of cross-validation.
\item cv_feature_save: list of length 10, feature after cross-validation.
\item cv_varimp_result: data frame, variable importance after cross-validation.
\item best_model: list of length 7.
\item best_model_feature: list of length 7.
}
}
\description{
This function constructs the machine learning model based on the output data processed by \code{\link{ML_data_process}}.
}
\examples{
\dontrun{
data("ML_exp_data")
data("ML_lipid_char_table")
data("ML_condition_table")
exp_data <- ML_exp_data
lipid_char_table <- ML_lipid_char_table
condition_table <- ML_condition_table
char_var <- colnames(lipid_char_table)[-1]
ML_data <- ML_data_process(exp_data, group_info = condition_table, lipid_char_table,
                           char_var[1], exclude_var_missing=T, missing_pct_limit=50,
                           replace_zero=T, zero2what='min', xmin=0.5,replace_NA=T,
                           NA2what='min', ymin=0.5, pct_transform=T, data_transform=T,
                           trans_type='log', centering=F, scaling=F)
ML_final(ML_data[[2]],ranking_method='Random_forest', ML_method='Random_forest',
         split_prop=0.3, nfold=10)
}
}
