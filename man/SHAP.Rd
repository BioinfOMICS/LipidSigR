% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SHAP.R
\name{SHAP}
\alias{SHAP}
\title{SHAP}
\usage{
SHAP(data, best_model, best_model_feature, ML_method, feature_n, nsim)
}
\arguments{
\item{data}{The output data frame(list[[2]]) of \code{\link{ML_data_process}}.}

\item{best_model}{The ouput list of \code{\link{ML_data_process}} (list[[8]]).}

\item{best_model_feature}{The ouput list of \code{\link{ML_data_process}} (list[[9]]).}

\item{ML_method}{A character string for the machine learning method to be computed. Allowed methods include 'xgboost', 'Random_forest', 'SVM', 'Lasso', 'Ridge', 'ElasticNet'.}

\item{feature_n}{A numeric value specifying the number of features to be shown.}

\item{nsim}{A positive integer indicating the times of simulation.}
}
\value{
Return a list of 1 table, 1 data frame, and 2 plots.
\enumerate{
\item shap_score: table of SHAP values.
\item shap_long: data frame, long-format SHAP data.
\item mean_shapley_plot: SHAP feature importance plot.
\item all_shapley_plot: SHAP value plot.
}
}
\description{
This function uses the Shapley Additive exPlanations (SHAP) approach to rank and visualize the feature importance based on a user-defined feature number.
}
\examples{
library(SHAPforxgboost)
data("ML_exp_data")
data("ML_lipid_char_table")
data("ML_condition_table")
exp_data <- ML_exp_data
lipid_char_table <- ML_lipid_char_table
condition_table <- ML_condition_table
char_var <- colnames(lipid_char_table)[-1]
ML_data <- ML_data_process(exp_data, group_info = condition_table,
                           lipid_char_table, char_var[1],
                           exclude_var_missing=TRUE, missing_pct_limit=50,
                           replace_zero=TRUE, zero2what='min', xmin=0.5,
                           replace_NA=TRUE, NA2what='min', ymin=0.5,
                           pct_transform=TRUE, data_transform=TRUE,
                           trans_type='log', centering=FALSE, scaling=FALSE)
ML_output <- ML_final(ML_data[[2]], ranking_method='Random_forest',
                      ML_method='Random_forest', split_prop=0.3, nfold=10)
SHAP(ML_data[[2]], best_model=ML_output[[8]],
     best_model_feature=ML_output[[9]],
     ML_method='Random_forest', feature_n=10, nsim=5)
}
