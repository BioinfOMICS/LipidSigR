% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ROC_plot_all.R
\name{ROC_plot_all}
\alias{ROC_plot_all}
\title{ROC_plot_all}
\usage{
ROC_plot_all(data1, data2, feature_n, plotly = TRUE)
}
\arguments{
\item{data1}{receiver operating characteristic after cross-validation. An
output data frame of \code{\link{ML_final}}
(list\bold{[[3]]}, cv_ROC_result).}

\item{data2}{mean receiver operating characteristic of cross-validation.
An output data frame of \code{\link{ML_final}}
(list\bold{[[5]]}, cv_meanROC_result).}

\item{feature_n}{A numeric value specifying the number of features to be
shown.}

\item{plotly}{Logical value. If TRUE, return the resulting plots dynamically.}
}
\value{
1 tibble, 1 data frame, and 2 plot.
\enumerate{
\item data2[-c(8,9)]: tibble of ROC values
\item mean_AUC_plot: ROC curve plot
\item ROC_plot_data: ROC data frame of n features
\item ROC_plot: average ROC curve plot of n features
}
}
\description{
The receiver operating characteristic (ROC) curve is one of
the common methods to evaluate the diagnostic ability of a
binary classifier. Mean AUC and 95% confidence interval for the ROC curve
are calculated from all CV runs in each feature number.

This function provides
\enumerate{
\item the overall ROC Curve of CVs with different feature numbers.
\item the ROC Curve of average CVs by user-selected feature numbers.
}
}
\examples{
library(dplyr)
data("ML_exp_data")
data("ML_lipid_char_table")
data("ML_condition_table")
condition_table <- ML_condition_table[85:144, ]
exp_data <- ML_exp_data[1:40, ] \%>\%
   select(feature, condition_table$sample_name)
lipid_char_table <- ML_lipid_char_table[1:40, ]
char_var <- colnames(lipid_char_table)[-1]
ML_data <- ML_data_process(exp_data, group_info = condition_table,
                           lipid_char_table, char_var[1],
                           exclude_var_missing=TRUE, missing_pct_limit=50,
                           replace_zero=TRUE, zero2what='min', xmin=0.5,
                           replace_NA=TRUE, NA2what='min', ymin=0.5,
                           pct_transform=TRUE, data_transform=TRUE,
                           trans_type='log', centering=FALSE, scaling=FALSE)
ML_output <- ML_final(ML_data[[2]], ranking_method='Random_forest',
                      ML_method='Random_forest', split_prop=0.3, nfold=3)
ROC_plot_all(ML_output[[3]], ML_output[[5]], feature_n=10, plotly=TRUE)
}
